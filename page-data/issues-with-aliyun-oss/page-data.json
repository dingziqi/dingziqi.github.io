{"componentChunkName":"component---src-templates-blog-post-js","path":"/issues-with-aliyun-oss/","result":{"data":{"site":{"siteMetadata":{"title":"D.Z"}},"markdownRemark":{"id":"8882e676-9cf6-53c8-ad5b-248fec05a620","excerpt":"公司 APP 中的图片资源是存储在阿里云 OSS 中，由于图片资源在上传端没有做限制，导致 OSS 里存储的图的巨大，影响了 C 端页面的渲染速度。虽然项目中也有使用到 OSS 提供的缩放功能，但是仍有一些地方需要优化，以下就是记录我优化的方向： 统一的 url…","html":"<p>公司 APP 中的图片资源是存储在阿里云 OSS 中，由于图片资源在上传端没有做限制，导致 OSS 里存储的图的巨大，影响了 C 端页面的渲染速度。虽然项目中也有使用到 OSS 提供的缩放功能，但是仍有一些地方需要优化，以下就是记录我优化的方向：</p>\n<h2 id=\"统一的-url-处理入口\" style=\"position:relative;\"><a href=\"#%E7%BB%9F%E4%B8%80%E7%9A%84-url-%E5%A4%84%E7%90%86%E5%85%A5%E5%8F%A3\" aria-label=\"统一的 url 处理入口 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>统一的 url 处理入口</h2>\n<p>原先的的做法是提供一个工具函数将原图片地址转换成一个含剪切 queryString 的地址，这种做法的缺点是无法每个使用的地方都需要额外的调用一次这个函数，伪代码是：<code class=\"language-text\">const compressedUrl = getCompressedUrl(originUrl, size)</code>。仔细思考一下就会发现 originUrl 和 size 这两个数据我们其实还会传递给我们的 Image 组件，我们完全可以将 url 处理过程内置到 Image 组件中即可。所以最终的做法是将这个调用转换工具函数的逻辑内置到一个自定义图片组件中，通过读取图片的 source 和 style 即可获取到我们需要的 originUrl 和 size，转换后的 url 也是在我们自定义图片组件内部进行消费。这样，整个处理过程对业务方是无感知的。</p>\n<h2 id=\"缩放模式的选择\" style=\"position:relative;\"><a href=\"#%E7%BC%A9%E6%94%BE%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%80%89%E6%8B%A9\" aria-label=\"缩放模式的选择 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缩放模式的选择</h2>\n<p>我们使用缩放的场景的前提是我们必须至少知道图片宽高中的一项。但实际使用中，只设定目标宽/高和同时设定宽高是会受缩放的 mode 影响的。在我们公司的项目中，默认的缩放 mode 是 <code class=\"language-text\">fill</code>，即缩放到目标尺寸，对超出部分进行裁切。但是如果我们只指定了宽/高，那么在该模式下会按宽高比 1:1 来裁剪，但是通常情况下我们只指定宽/高通常其它的是保持等比缩放。这种情况下我们就需要使用另外一种 mode，即 OSS 默认的 lfit/mfit，这时图片才会保持宽高等比缩放。所以在我们的处理函数中还应该根据传入的设定目标是否同时包含宽高来选择缩放的 mode。</p>\n<h2 id=\"quality-未生效\" style=\"position:relative;\"><a href=\"#quality-%E6%9C%AA%E7%94%9F%E6%95%88\" aria-label=\"quality 未生效 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>quality 未生效</h2>\n<p>查阅文档后发现 OSS 的 quality 是只针对 jpg、webp 格式，而公司的大部分图片都是 png 格式的。</p>\n<h2 id=\"追求更小的尺寸\" style=\"position:relative;\"><a href=\"#%E8%BF%BD%E6%B1%82%E6%9B%B4%E5%B0%8F%E7%9A%84%E5%B0%BA%E5%AF%B8\" aria-label=\"追求更小的尺寸 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>追求更小的尺寸</h2>\n<p>OSS 还支持 format 处理，我们可以将原图转换到 webp 格式，这样压缩后的图片尺寸能减少 30%（压缩率因图片而异），但是需要注意的是 webp 还有兼容性，我们需要做兼容处理。APP 中是通过 JavaScript 根据当前系统版本来选择是否启用格式转换。如果是在 HTML 中可以使用 picture 标签来做兼容处理。</p>\n<p>示例代码如下，source 用于声明针对特定 MIME 类型的资源地址，<strong>注意它只是资源的声明，并不是实际的图片元素</strong>，即使在浏览器支持 webp 的情况下，我们的 webp 图片实际仍然是渲染在 img 标签上，而 img 标签默认的资源将不生效。所以我们对图片的样式或者其它属性的声明都应该在 img 标签上。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xxx.png?x-oss-process=image%2F%2Fformat%2Cwebp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xxx.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code></pre></div>","frontmatter":{"title":"阿里云OSS使用的一些问题记录","date":"01-26, 2022","description":null,"tags":"阿里云,OSS"}},"previous":{"fields":{"slug":"/why-touchablewithoutfeedback-didn't-trigger-onpress-with-custom-component-as-children/"},"frontmatter":{"title":"自定义组件外层TouchableWithoutFeedback无法触发onPress"}},"next":{"fields":{"slug":"/trouble-shotting-in-react-router-v6/"},"frontmatter":{"title":"react-router@v6中的踩坑记录"}}},"pageContext":{"id":"8882e676-9cf6-53c8-ad5b-248fec05a620","previousPostId":"41797180-59b6-55d0-95ef-d906b3181c5e","nextPostId":"0e778ab5-45b7-5581-8e55-2efcce068a48"}},"staticQueryHashes":["2841359383"]}