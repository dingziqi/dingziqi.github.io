{"componentChunkName":"component---src-templates-blog-post-js","path":"/gc-with-filereader/","result":{"data":{"site":{"siteMetadata":{"title":"D.Z"}},"markdownRemark":{"id":"5bf87d07-2704-5bf3-823c-c4a6f87a2dbf","excerpt":"最近在研究文件上传，由于需要计算文件的 hash 值，所以会使用到 FileReader 来读取文件的内容。但是使用 FileReader 读取文件会写入到内存中，如果是大文件的话可能会因为内存不足导致浏览器奔溃。我在网上找了一圈也没看到介绍如何回收 FileReader…","html":"<p>最近在研究文件上传，由于需要计算文件的 hash 值，所以会使用到 FileReader 来读取文件的内容。但是使用 FileReader 读取文件会写入到内存中，如果是大文件的话可能会因为内存不足导致浏览器奔溃。我在网上找了一圈也没看到介绍如何回收 FileReader 占用的内容，所以在这里记录一下自己找到的一些知识。以下是一段 FileReader 的示例代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\nreader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// e.target.result 为读取结果</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>FileReader 会自动回收吗？</h2>\n<p>通常 JavaScript 的内存都是自动回收的，引擎判断是否内存能否被回收的依据是是否被引用，所以我们也可以通过变量置空来手动触发内存回收。但是在 FileReader 的示例中，变量是存储在 reader 的 onload 事件中，<code class=\"language-text\">e.target.result</code> 是一个只读的属性，所以我们没法手动释放内存。但是经过我的观察，读取完一段时间后浏览器是会把文件内容占用的内存释放，期间我没有做任何的操作。</p>\n<h2>FileReader 最佳实践</h2>\n<p>关于 FileReader 的正确用法我还是在阅读 <a href=\"https://github.com/satazor/js-spark-md5\">js-spark-md5</a> 的 README 发现的。虽然前面我们已经发现了浏览器会帮我们处理 FileReader 的内存回收问题，但是如果我们单次读取过大的文件，也会导致内存占用过大。最合理的做法是将文件分片，控制单次读取内容的大小，同时复用 reader，避免增加新的内存占用，示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> spark <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SparkMd5<span class=\"token punctuation\">.</span>ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> chunkSize <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token comment\">// 100M，分片大小会导致读取很慢</span>\n<span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nreader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  spark<span class=\"token punctuation\">.</span><span class=\"token function\">apend</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> file<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">loadChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    spark<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 读取完毕</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> chunkSize\n  reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  start <span class=\"token operator\">=</span> end\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"FileReader的内存回收","date":"10-21, 2021","description":null,"tags":"内存回收"}},"previous":{"fields":{"slug":"/fix-crash-when-upload-file/"},"frontmatter":{"title":"记录排查上传大视频导致浏览器奔溃的问题"}},"next":null},"pageContext":{"id":"5bf87d07-2704-5bf3-823c-c4a6f87a2dbf","previousPostId":"f54b6cc5-502e-5c39-a4bd-bb2b7697045d","nextPostId":null}},"staticQueryHashes":["2841359383"]}