{"componentChunkName":"component---src-templates-blog-post-js","path":"/trouble-shotting-in-react-router-v6/","result":{"data":{"site":{"siteMetadata":{"title":"D.Z"}},"markdownRemark":{"id":"0e778ab5-45b7-5581-8e55-2efcce068a48","excerpt":"2022-07-31 更新了 相同 pathname 相互跳转的问题 最近的项目是基于 create-react-app 官方模板进行定制，以便统一公司内部的 react…","html":"<blockquote>\n<p>2022-07-31 更新了 <a href=\"#%E7%9B%B8%E5%90%8C-pathname-%E7%9B%B8%E4%BA%92%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98\">相同 pathname 相互跳转的问题</a></p>\n</blockquote>\n<p>最近的项目是基于 create-react-app 官方模板进行定制，以便统一公司内部的 react 相关技术栈，避免“百花齐放”。由于是新项目模板，所以在项目中直接内置了 <code class=\"language-text\">react-router-dom@6.x</code>，本以为这个项目已经那么成熟应该不会有坑了，结果却是一坑接一坑。下面就是一些踩坑实录。</p>\n<h2 id=\"放弃类组件支持\" style=\"position:relative;\"><a href=\"#%E6%94%BE%E5%BC%83%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81\" aria-label=\"放弃类组件支持 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>放弃类组件支持</h2>\n<p>在函数组件的道路上，reactr-router-dom 属实激进，在 6.x 的版本里直接只提供 hook 形式的 api。这样的做法完全没有考虑旧代码的兼容和我们这种没有推广开 hooks 的开发团队。不过问题不大，官方不提供 <code class=\"language-text\">withRouter</code>，那我们自己实现一个好了。不过要注意我们实现的 <code class=\"language-text\">withRouter</code> 和旧的 api 还是有差异的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useLocation<span class=\"token punctuation\">,</span> useNavigate<span class=\"token punctuation\">,</span> useParams <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ComponentWithRouterProp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> location <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> router<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">,</span> navigate<span class=\"token punctuation\">,</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> ComponentWithRouterProp\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"路由声明的方式\" style=\"position:relative;\"><a href=\"#%E8%B7%AF%E7%94%B1%E5%A3%B0%E6%98%8E%E7%9A%84%E6%96%B9%E5%BC%8F\" aria-label=\"路由声明的方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>路由声明的方式</h2>\n<p>在旧版中，<code class=\"language-text\">Route</code> 组件的声明位置并没有强制约束，可以和我们其它的元素混合搭配。但是在新版中对相关组件的声明做了严格的约束，所有的路由声明都在 <code class=\"language-text\">Routes</code> 组件中，并且只能包含 <code class=\"language-text\">Route</code> 元素。这样的话原先的一些布局方案就行不通了，如原来的 navbar 是 navbar 代码与 Route 混搭的。在新版中我们可以使用嵌套路由来实现类似功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Outlet <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Navbar <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Ooutlet <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token operator\">&lt;</span>Routes<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Layout <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Home <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Routes<span class=\"token operator\">></span></code></pre></div>\n<p>上例中的 Layout 组件就是新版中用于渲染公共布局，其中的 <code class=\"language-text\">Outlet</code> 就是 react-router-dom 提供的用于渲染子路由的占位组件，其它的则为布局的元素。当然，该变更还会引发其它一系列的问题，可以继续往下看。</p>\n<h2 id=\"转场动画组件\" style=\"position:relative;\"><a href=\"#%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E7%BB%84%E4%BB%B6\" aria-label=\"转场动画组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>转场动画组件</h2>\n<p>在旧版中，官方是推荐使用 <a href=\"https://github.com/reactjs/react-transition-group\">react-transition-group</a> 来做转场动画，但是由于新版路由的声明方式发生变化，现在支持严格的 <code class=\"language-text\">Routes</code> 嵌套 <code class=\"language-text\">Route</code> 的方式，导致官方的 demo 现在执行不了。进过一番搜索后找到了适用于 v6.x 的写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMatch<span class=\"token punctuation\">,</span> useLocation<span class=\"token punctuation\">,</span> Routes<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TransitionGroup<span class=\"token punctuation\">,</span> CSSTransition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-transitoin-group'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>TransitionGroup<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>CSSTranstion key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">}</span> timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">150</span><span class=\"token punctuation\">}</span> classNames<span class=\"token operator\">=</span><span class=\"token string\">\"fade\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Routes location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Route\n              index<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span>\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span>\n              path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span>\n              element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Routes<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CSSTransition<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TransitionGroup<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是，transition 是配套有 <code class=\"language-text\">enter</code> 和 <code class=\"language-text\">exit</code> 阶段。这就意味着必然存在多页共存的场景，同时还意味着我们每个页面的布局必须为绝对定位，否则就会出现两个页面上下排列的情况，不过多页共存也是最初计划的 slide 动画必须会存在的。但是改变页面布局又会引起一系列其它的变更，导致和滚动的相关的逻辑都会发生变更，评估影响范围还是比较大。</p>\n<p>经过一番折腾后，发现可以抛弃 <code class=\"language-text\">react-transition-group</code> 而使用 <code class=\"language-text\">animate.css</code>，将动画降级到 fade 样式即可。这样的好处是 <code class=\"language-text\">animate.css</code> 是纯 CSS 的库，这样可以解耦与 react-router-dom 的关联，并且 fade 动画可以规避多页共存的情况，并且转场效果在产品那里也是能接受的。最终代码效果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'animate.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">animatify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  route<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>route<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">}</span>\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"animate__animated animate__fast animate__fadeIn\"</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>route<span class=\"token punctuation\">.</span>element <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> route<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> HomePage <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> element<span class=\"token operator\">:</span> HomePage\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>animatify<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">AppRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Routes<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> elemet<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Layout <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>\n          routes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> element <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Route\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span>\n              index<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span>\n              path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span>\n              element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Routes<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"navigationtype-含义\" style=\"position:relative;\"><a href=\"#navigationtype-%E5%90%AB%E4%B9%89\" aria-label=\"navigationtype 含义 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>navigationType 含义</h2>\n<p>在我们的实际业务中，我们可能会需要根据页面的前进/后退来处理一些逻辑。但是在 6.x 版本开始，react-router-dom 不再向外暴露 history 对象，这样我们就没法根据堆栈信息来判断页面进退情况。查看新版 api 后发现有一个 <code class=\"language-text\">useNavigationType</code>，文档中描述的 navigationType 值类型有 <code class=\"language-text\">POP</code>、<code class=\"language-text\">PUSH</code> 和 <code class=\"language-text\">REPLACE</code>，单纯的从字面含义上来看，应该分别是对应 <code class=\"language-text\">回退</code>、<code class=\"language-text\">前进</code> 和 <code class=\"language-text\">替换</code>。但实际情况却是首次进入页面的 navigationType 竟然是 <code class=\"language-text\">POP</code>，不过好像接下来的跳转和回退的 navigationType 的值都是正确的。不过还有一种情况也需要注意，即我们通过 <code class=\"language-text\">&lt;a href=\"/#/next-page\">next page&lt;/a></code> 这样的方式跳转时，也会被当做首次进入页面，但实际情况我们并没有重载 doucment（这个坑困扰了我好几天…）。</p>\n<h2 id=\"keep-alive-实现\" style=\"position:relative;\"><a href=\"#keep-alive-%E5%AE%9E%E7%8E%B0\" aria-label=\"keep alive 实现 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>keep-alive 实现</h2>\n<p>keep-alive 的应用场景是单页路由回退的缓存逻辑，在未使用 keep-alive 的场景下，单页回退到的页面会重新执行完整的生命周期（即重新请求接口和渲染）。在我们大部分的场景中，回退时并不需要刷新页面，特别是一些长列表的情况，我们还需要保留跳出的滚动位置等等，keep-alive 就是用来做这个的。</p>\n<p>在 react 生态中有 <a href=\"https://github.com/StructureBuilder/react-keep-alive\">react-keep-alive</a> 和 <a href=\"https://github.com/CJY0208/react-activation\">react-reaction</a> 两个库，但是二者目前都没有适配 <a href=\"mailto:react-router-dom@6.x\">react-router-dom@6.x</a>，直接使用的会问题。经过一番搜索之后，我找到一个通过自定义一个 outlet 来实现的 keep-alive 的方案，原方案 <a href=\"https://github.com/CJY0208/react-router-cache-route/issues/132#issuecomment-1120172225\">链接在此</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReactElement<span class=\"token punctuation\">,</span> useContext<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Freeze <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-freeze\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UNSAFE_RouteContext <span class=\"token keyword\">as</span> RouteContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">KeepAliveOutlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> caches <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> matchedElement <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>RouteContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>outlet <span class=\"token comment\">// v6.3之后useOutlet会多了一层嵌套</span>\n  <span class=\"token keyword\">const</span> matchedPath <span class=\"token operator\">=</span> matchedElement<span class=\"token operator\">?.</span>props<span class=\"token operator\">?.</span>value<span class=\"token operator\">?.</span>matches<span class=\"token operator\">?.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>pathname\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matchedElement <span class=\"token operator\">&amp;&amp;</span> matchedPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    caches<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">[</span>matchedPath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matchedElement\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Freeze key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span> freeze<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>element <span class=\"token operator\">!==</span> matchedElement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Freeze<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>使用</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Layout.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* 将 react-router-dom 官方的 outlet 替换成我们自己实现的 KeepAliveOutlet 即可 */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;Outlet /> */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>KeepAliveOutlet <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，上面实现的 KeepAliveOutlet 只是实现 keep-alive 的核心功能，要在实际项目中使用我们还需要拓展一下，增加回退页面时清除上一页面的缓存，支持手动清除缓存等等。</p>\n<h2 id=\"相同-pathname-相互跳转的问题\" style=\"position:relative;\"><a href=\"#%E7%9B%B8%E5%90%8C-pathname-%E7%9B%B8%E4%BA%92%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"相同 pathname 相互跳转的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相同 pathname 相互跳转的问题</h2>\n<p>由于我们使用了 nest route 的特性，我们的页面路由示例可能会被 <code class=\"language-text\">Outlet</code> 缓存住，从而导致跳转新页面未生成新的页面组件实例。我遇到该的问题场景是跳转到与当前页相同的路径时，即：从 <code class=\"language-text\">/a</code> 点击跳转到 <code class=\"language-text\">/a?query=xxx</code>。这种场景其实也比较常见，比如在商品详情页内有一个推荐商品，需要跳转到推荐商品的详情。如果是 <code class=\"language-text\">/a</code> 跳 <code class=\"language-text\">/b</code> 再 <code class=\"language-text\">/a</code> 的情况是不会存在上述问题的。</p>\n<p>解决的办法就是为我们的 Outlet 手动指定 key 属性，从外部干预 Outlet 的缓存机制。但是需要注意，这个 key 必须要符合你的场景，千万别乱设置。比如我一开始用的就是 <code class=\"language-text\">location.key</code>，它是每次跳转都会生成一个新的 key，结果直接把我的 keep-alive 的逻辑搞挂了。最后我结合我的使用场景，使用的 key 是 searchParams，即：pathname 相同而 searchParams 不同时需要刷新页面，而 pathname 和 searchParams 都相同时不刷新。</p>\n<h2 id=\"demo\" style=\"position:relative;\"><a href=\"#demo\" aria-label=\"demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>demo</h2>\n<p>上述这些实践的我整理发布到我的 github 项目中了：<a href=\"https://github.com/dingziqi/react-router-v6\">react-router-v6</a>，有需要的可以参考参考。</p>","frontmatter":{"title":"react-router@v6中的踩坑记录","date":"05-16, 2022","description":null,"tags":"踩坑"}},"previous":{"fields":{"slug":"/issues-with-aliyun-oss/"},"frontmatter":{"title":"阿里云OSS使用的一些问题记录"}},"next":{"fields":{"slug":"/confused-history-dot-length/"},"frontmatter":{"title":"令人迷惑的history.length"}}},"pageContext":{"id":"0e778ab5-45b7-5581-8e55-2efcce068a48","previousPostId":"8882e676-9cf6-53c8-ad5b-248fec05a620","nextPostId":"127f67d6-7e16-54a2-b6b3-95ec57b1e383"}},"staticQueryHashes":["2841359383"]}