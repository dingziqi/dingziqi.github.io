{"componentChunkName":"component---src-templates-blog-post-js","path":"/fix-crash-when-upload-file/","result":{"data":{"site":{"siteMetadata":{"title":"D.Z"}},"markdownRemark":{"id":"f54b6cc5-502e-5c39-a4bd-bb2b7697045d","excerpt":"背景 负责达人后台的同事找我帮忙排查一个问题，说是在上传超过 1G 视频的时候浏览器会奔溃，浏览器提示的是内存不足，他们给我的初步判断是没有使用分片上传导致的。 排查过程 如何分片上传 因为上传一般都是用云服务商提供的 sdk，所以一般大家对如何分片上传其实都不太了解。 其实文件的分片很简单，直接对 blob…","html":"<h2 id=\"背景\" style=\"position:relative;\"><a href=\"#%E8%83%8C%E6%99%AF\" aria-label=\"背景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>背景</h2>\n<p>负责达人后台的同事找我帮忙排查一个问题，说是在上传超过 1G 视频的时候浏览器会奔溃，浏览器提示的是内存不足，他们给我的初步判断是没有使用分片上传导致的。</p>\n<h2 id=\"排查过程\" style=\"position:relative;\"><a href=\"#%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B\" aria-label=\"排查过程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>排查过程</h2>\n<h3 id=\"如何分片上传\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0\" aria-label=\"如何分片上传 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何分片上传</h3>\n<p>因为上传一般都是用云服务商提供的 sdk，所以一般大家对如何分片上传其实都不太了解。</p>\n<p>其实文件的分片很简单，直接对 blob 对象做切割即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> chunkSize <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token comment\">// 1M</span>\n\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> file<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> chunkSize\n  chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  start <span class=\"token operator\">+=</span> end\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上传的话直接构建 FormData 对象提交即可，利用分片我们还可以实现断点续传，秒传（同一文件直接返回服务器有资源）等。</p>\n<h3 id=\"何时会写入内存\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BC%9A%E5%86%99%E5%85%A5%E5%86%85%E5%AD%98\" aria-label=\"何时会写入内存 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时会写入内存</h3>\n<p>Chrome 目前内置有一个标签/插件级别的任务管理器，通过这个任务管理器我们就可以看到每个标签或者插件对应的内存/CPU/网络的占用情况，这个新增的功能貌似已经有半年以上了。我们可以通过在浏览器头部的空白区域点击【右键/任务管理器】来打开它。</p>\n<p>有了这个工具，我们就可以观察我们的页面内存的变化情况，这样就能排查究竟是什么步骤占用了大量的内存。通过观察发现，内存暴增在点击 input 选择完文件后就已经发生了，所以可以确认并非是上传操作导致的。input 标签选择文件这个操作肯定不会直接把文件写入内存的，不然根本就不可能上传大文件了，所以应该还是在选择完文件后有后续的操作导致内存暴增。</p>\n<p>阅读源码后，发现在 input 的 change 回调里有一些的操作来读取视频的信息用于对上传做限制。具体做法是：</p>\n<ul>\n<li>\n<p><strong>文件的大小</strong>：\n这个直接读取 event 对象下的 file 对象的 size 属性即可读到。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>视频的宽高</strong>\n视频宽度读取的操作有点迷，我解释不通…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span>  reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> videoObjUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> videoObj <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvideoObj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onloadmetadata</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>videoObjUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... videoObj.videoHeight</span>\n  <span class=\"token comment\">// ... videoObj.videoWidth</span>\n<span class=\"token punctuation\">}</span>\n\nvideoObj<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> videoObjUrl<span class=\"token punctuation\">;</span>\nvideoObj<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>视频的时长</strong>\n时长是通过 Audio 接口获取的，具体步骤是通过 <code class=\"language-text\">URL.createObjectURL</code> 将 change 事件的 file 对象转换成可识别的 URL 供 Audio 来加载使用，然后监听实例化后的 audio 元素的 <code class=\"language-text\">loadedmetadata</code> 事件，这个事件会在获取到视频元数据后响应，而且此时是无需加载视频内容数据的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fileUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> audio <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Audio</span><span class=\"token punctuation\">(</span>fileUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naudio<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadedmetadata'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// audio.duration</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<p>要了解上述一系列的操作，我们需要熟悉以下一些知识：</p>\n<h4 id=\"file-对象\" style=\"position:relative;\"><a href=\"#file-%E5%AF%B9%E8%B1%A1\" aria-label=\"file 对象 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>file 对象</h4>\n<p>我们通过监听 input 的 change 事件拿到的是一个 FileList 对象，每项是一个 File 对象。File 对象是一类特殊的 Blob 对象，所以会有一些关于文件的信息，如：<code class=\"language-text\">name</code>、<code class=\"language-text\">size</code>、<code class=\"language-text\">lastModified</code> 等，这些都是只读属性。</p>\n<h4 id=\"objecturl--dataurls\" style=\"position:relative;\"><a href=\"#objecturl--dataurls\" aria-label=\"objecturl  dataurls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObjectURL / DataURL(s)</h4>\n<p>File 对象本身就是一个 Blob 对象，所以可以直接被 <code class=\"language-text\">FileReader</code>、<code class=\"language-text\">XMLHttpRequest.send()</code> 等 API 使用，但是如果 File 是图片或者视频时，我们还可能希望能被 <code class=\"language-text\">&lt;audio></code> 或 <code class=\"language-text\">&lt;video></code> 等元素使用（如上传时的预览）。但是这些元素都只支持通过 url 来访问资源，所以我们必须将要想办法将 blob 类型 file 转换成 url 才行。</p>\n<p>我们可以借助 JavaScript 将 blob 对象转换成两种类型的 url：</p>\n<p>一种是 ObjectURL/BlobURL，对应的是 <code class=\"language-text\">URL.createObjectURL</code> 方法，它是字符类型，格式是 <code class=\"language-text\">blob:http://xxx.com/id</code>。使用这种 URL 需要注意几点：ObjectURL 需要手动内存回收，通过 <code class=\"language-text\">URL.revokeObjectURL(target)</code> 来实现，另外就是每次都会创建新的 ObjectURL，即使是对同一个对象进行操作。</p>\n<p>另一种就是 DataURL，它也是字符类型，格式为 <code class=\"language-text\">data:[mediatype][;base64],&lt;data></code>，我们是通过 <code class=\"language-text\">FileReader.prototype.readAsDataURL</code> 来将 File 对象转换成 DataURL 形式。</p>\n<p>上述两种 URL 的区别是 ObjectURL 只是对 Blob 对象的引用，而 DataURL 会把 Blob 对象转换成 base64 格式。了解这个之后，我们便能发现是在获取视频宽高时使用了 DataURL 导致内存占用上升。</p>\n<h2 id=\"解决方案\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-label=\"解决方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决方案</h2>\n<p>旧方案其实是漏洞百出，可以说是错误的解决方案，只是碰巧凑到一起把问题解决了。我们的目标是获取视频的信息，所以压根就不能用 audio 来加载 metadata，因为 audio 肯定只能获取单纯的音频信息。然后就是错误的使用了 DataURL，直接使用 ObjectURL 就能让 video 加载 metadata的，所以最终的方案会是如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> objUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvideo<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> objUrl<span class=\"token punctuation\">;</span>\nvideo<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadmetadata'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// video.duration</span>\n  <span class=\"token comment\">// video.videoHeight</span>\n  <span class=\"token comment\">// video.videoWidth</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"记录排查上传大视频导致浏览器奔溃的问题","date":"10-20, 2021","description":null,"tags":"JavaScript"}},"previous":{"fields":{"slug":"/remove-disqus-as/"},"frontmatter":{"title":"去除disqus广告"}},"next":{"fields":{"slug":"/gc-with-filereader/"},"frontmatter":{"title":"FileReader的内存回收"}}},"pageContext":{"id":"f54b6cc5-502e-5c39-a4bd-bb2b7697045d","previousPostId":"c5d4dc48-eaf1-55fd-be4f-fb3e7165408b","nextPostId":"5bf87d07-2704-5bf3-823c-c4a6f87a2dbf"}},"staticQueryHashes":["2841359383"]}